protected void processEvent(ResponseHandlingEvent event) {
else if (event.getAction() == ResponseHandlingEvent.Action.CLEAR_DEFAULT_PREFERENCES) {
            if (event.getExtraInfo() instanceof ClearDefaultPreferenceAction) {
                sharedPreferencesUtil.clearDefaultPreferences((ClearDefaultPreferenceAction) event.getExtraInfo());
            }
        } else if (event.getAction() == ResponseHandlingEvent.Action.SAVE_SEARCH_HISTORY) {
            if (event.getExtraInfo() instanceof SaveSearchQueryAction action) {
                if (action.getAction() != null && action.getAction().equals("save")) {
                    SearchUtil.Companion.saveRecentSearches(sharedPreferencesUtil, action);
                } else {
                    SearchUtil.Companion.deleteRecentSearch(sharedPreferencesUtil, action);
                }
            }


protected void resetHabSearchView() {
        if (searchListPresenter != null) {
            searchListPresenter.stopSearchRequest();
        }
        habContentMoleculeView.showFabIcon();
        habContentMoleculeView.hideBackIcon();
        if (searchOverlayView != null) {
            searchOverlayView.setVisibility(View.GONE);
            searchOverlayView.removeAllViews();
        }
        if (habContentMoleculeView != null) {
            habContentMoleculeView.clearSearchFocus();
        }
        hideSearchOverlay();
        mToolbar.setVisibility(View.VISIBLE);
    }


    private void hideSearchOverlay() {
        searchOverlayView.setVisibility(View.GONE);
        searchListTemplateView.setVisibility(View.GONE);
    }

    @Override
    public void habSearchResults(@NonNull BaseResponse baseResponse) {
        if (baseResponse instanceof GlobalSearchListTemplateModel) {
            GlobalSearchListMoleculePageModel pagemodel = (GlobalSearchListMoleculePageModel) ((GlobalSearchListTemplateModel) baseResponse).getPageData();
            assert pagemodel != null;
            if (pagemodel.getListTemplate() != null) {
                searchListTemplateView.applyStyle(pagemodel.getListTemplate());
                searchListTemplateView.setVisibility(View.VISIBLE);
                searchOverlayView.setVisibility(View.GONE);
                searchListTemplateView.setOnListItemClickListener(delegateModel -> {
                    if (delegateModel.getActionModel() != null) {
                        Action action = ActionModelConverter.Companion.convertToAction(delegateModel.getActionModel());
                        executeSearchResultsAction(action);
                    }
                });
            }
        }
    }

    @Override
    public void showOrHideOverlay(boolean show, GlobalSearchListTemplateModel model) {
        runOnUiThread(() -> {
            if (show) {
                searchOverlayView.setVisibility(View.GONE);
                mToolbar.setVisibility(View.GONE);
                searchListTemplateView.setVisibility(View.VISIBLE);
                if (null != model && model.getPageData() != null) {
                    AtomicMoleculeListPageModel pageModel = (AtomicMoleculeListPageModel) model.getPageData();
                    SearchUtil.Companion.modelWithSearchHistory(pageModel,sharedPreferencesUtil);
                    searchListTemplateView.applyStyle(pageModel.getListTemplate());
                } else {
                    searchListTemplateView.setBackgroundColor(Color.WHITE);
                }
            } else {
                searchOverlayView.setVisibility(View.GONE);
                searchListPresenter.hideKeyBoard(this);
                habContentMoleculeView.showFabIcon();
                habContentMoleculeView.hideBackIcon();
                mToolbar.setVisibility(View.VISIBLE);
            }
        });
    }

    @Override
    public void hideSearchList(boolean hide) {
        runOnUiThread(() -> {
            if (hide) {
                searchListTemplateView.setVisibility(View.GONE);
            }
        });
    }

    @Override
    public void onHabBackPressed() {
        resetHabSearchView();
    }

    public void executeSearchResultsAction(Action action) {
        resetHabSearchView();
        searchListPresenter.executeAction(action);
    }


}
