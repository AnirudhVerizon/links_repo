public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getIntent() != null && !getIntent().getAction().equalsIgnoreCase(PageControllerUtils.INTENT_ACTION_MVM_TEST_SCREEN)) {
            return;
        }

        Constants.sslCertExpCheck = false;
        Constants.sslCertPinFail = false;
        DeviceUtils.setOrientationBasedOnDevice(this);
        setContentView(R.layout.activity_test_screen);
        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        mvmSettings = MVMSettings.getInstance(getApplicationContext());
        String version;
        try {
            version = getPackageManager().getPackageInfo(getPackageName(), 0).versionName;
        } catch (Exception e1) {
            version = "1.0.0";
        }
        TextView productFlavor = (TextView)findViewById(R.id.productFlavor);
        productFlavor.setText("Product flavor is "+getProductFlavor(getApplicationContext()));
        urls = getResources().getStringArray(R.array.url_array);
        mfURLS = getResources().getStringArray(R.array.mf_server_array);
        mf_preapyURLS = getResources().getStringArray(R.array.prepay_mf_server_array);
        speedTestURLS = getResources().getStringArray(R.array.speedTest_server);
        assistTouchURLS = getResources().getStringArray(R.array.assist_touch_server_array);
        mfNsaURLS = getResources().getStringArray(R.array.mf_nsa_server_array);
        shopPccTestingUrls = getResources().getStringArray(R.array.shop_pcc_testing);

        // setup server spinner
        serverURLSpinner = (Spinner) findViewById(R.id.EnterMdnTestScreen_Server);
        serverUrlArrayNames = Arrays.asList(getResources().getStringArray(R.array.Server_url_array));
        ArrayAdapter<CharSequence> adapterServer = ArrayAdapter.createFromResource(this, R.array.Server_url_array, android.R.layout.simple_spinner_item);
        adapterServer.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        serverURLSpinner.setAdapter(adapterServer);
        serverURLSpinner.setSelection(1);
        OnServerSelectedListener spinnerServerListener = new OnServerSelectedListener(this, adapterServer);

        serverURLSpinner.setOnItemSelectedListener(spinnerServerListener);

        redirectToSpinner = findViewById(R.id.redirectTo);
        ArrayAdapter<CharSequence> adapterRedirectTo = ArrayAdapter.createFromResource(this, R.array.redirect_to_array, android.R.layout.simple_spinner_item);
        adapterRedirectTo.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        redirectToSpinner.setAdapter(adapterRedirectTo);
        redirectToSpinner.setSelection(0);

        OnRedirectToSelectedListener redirectToSelectedListener = new OnRedirectToSelectedListener(this, adapterRedirectTo);
        redirectToSpinner.setOnItemSelectedListener(redirectToSelectedListener);


    public class OnRedirectToSelectedListener implements AdapterView.OnItemSelectedListener {
        //provide local instances of the adapter and the activity
        ArrayAdapter<CharSequence> adapter;
        Activity activity;

        public OnRedirectToSelectedListener(Activity activity, ArrayAdapter<CharSequence> adapter) {
            this.activity = activity;
            this.adapter = adapter;
        }

        public void onItemSelected(AdapterView<?> parent, View view, int position, long row) {
            String selection = parent.getItemAtPosition(position).toString();
            MVMSettings.getInstance().saveSetting("REDIRECT_CANARY_VALUE", selection, true);
        }

        public void onNothingSelected(AdapterView<?> parent) {
        }
    }



Spinner deploymentTypeSpinner = findViewById(R.id.selectDeploymentTypeSpinner);
        ArrayAdapter<CharSequence> mfServerAdapter = ArrayAdapter.createFromResource(this, R.array.mf_server_mapping, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> redirectToAdapter = ArrayAdapter.createFromResource(this, R.array.redirect_to_array, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> nsaMfServerAdapter = ArrayAdapter.createFromResource(this, R.array.mf_nsa_server_mapping, android.R.layout.simple_spinner_item);


        class OnDeploymentTypeSelectedListener implements AdapterView.OnItemSelectedListener {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long row) {
                String selectedDeploymentType = parent.getItemAtPosition(position).toString();
                Map<String, String[]> deploymentMappings = DeploymentMappingsUtil.getDeploymentMappings();

                if (deploymentMappings.containsKey(selectedDeploymentType)) {
                    String[] autofillValues = deploymentMappings.get(selectedDeploymentType);

                    // Autofill selectmfserver spinner
                    Spinner mfServerSpinner = findViewById(R.id.selectmfserver);
                    int mfServerPosition = mfServerAdapter.getPosition(autofillValues[0]);
                    mfServerSpinner.setSelection(mfServerPosition);

                    // Autofill redirectTo spinner
                    Spinner redirectToSpinner = findViewById(R.id.redirectTo);
                    int redirectToPosition = redirectToAdapter.getPosition(autofillValues[1]);
                    redirectToSpinner.setSelection(redirectToPosition);

                    // Autofill select_nsa_mfserver spinner
                    Spinner nsaMfServerSpinner = findViewById(R.id.select_nsa_mfserver);
                    int nsaMfServerPosition = nsaMfServerAdapter.getPosition(autofillValues[2]);
                    nsaMfServerSpinner.setSelection(nsaMfServerPosition);
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                // No action needed when nothing is selected
            }
        }
        deploymentTypeSpinner.setOnItemSelectedListener(new OnDeploymentTypeSelectedListener());








